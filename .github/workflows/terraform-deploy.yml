# .github/workflows/terraform-deploy.yml
name: 🛠 Terraform Deploy

on:
  push:
    paths:
      - 'terraform/**'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  STATE_BUCKET: ${{ secrets.GCP_TF_STATE_BUCKET }}
  PROJECT_ID:   ${{ secrets.GCP_PROJECT_ID }}
  REGION:       ${{ secrets.GCP_REGION }}
  CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}

jobs:
  infra:
    name: 🚧 Infra (destroy & recreate GKE + node-pools)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Install gcloud, kubectl & auth plugin
        run: |
          curl -fsSL https://sdk.cloud.google.com | bash >/dev/null
          source $HOME/google-cloud-sdk/path.bash.inc
          gcloud components install kubectl gke-gcloud-auth-plugin --quiet

      - name: Remove stale Terraform lock files
        run: |
          gcloud storage rm --quiet "gs://${STATE_BUCKET}/terraform/state/infra/default.tflock" || true
          gcloud storage rm --quiet "gs://${STATE_BUCKET}/terraform/state/apps/default.tflock"   || true


      - name: Ensure no pre-existing cluster
        run: |
          if gcloud container clusters describe "$CLUSTER_NAME" \
               --region="$REGION" --project="$PROJECT_ID" &>/dev/null; then
            echo "→ Deleting existing cluster ${CLUSTER_NAME}…"
            # Continue even if delete is already in-progress
            gcloud container clusters delete "$CLUSTER_NAME" \
              --region="$REGION" --project="$PROJECT_ID" --quiet \
              || echo "⚠️ Cluster delete failed (perhaps still creating/deleting), continuing."
          else
            echo "→ No cluster named ${CLUSTER_NAME}, skipping delete."
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init (infra)
        working-directory: terraform/infra
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${STATE_BUCKET}" \
            -backend-config="prefix=terraform/state/infra"

      - name: Terraform Import static IP
        working-directory: terraform/infra
        run: |
          terraform import \
            google_compute_address.coding_assistant_ip \
            projects/${{ secrets.GCP_PROJECT_ID }}/regions/${{ secrets.GCP_REGION }}/addresses/coding-assistant-ip || true

      - name: Terraform Apply (infra)
        working-directory: terraform/infra
        run: |
          terraform apply \
            -var-file="terraform.tfvars" \
            -auto-approve

  apps:
    name: 🚀 Apps (Cloud Run + Helm)
    needs: infra
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install gcloud, kubectl & auth plugin
        run: |
          curl -fsSL https://sdk.cloud.google.com | bash >/dev/null
          source $HOME/google-cloud-sdk/path.bash.inc
          gcloud components install kubectl gke-gcloud-auth-plugin --quiet

      - name: Fetch GKE credentials
        run: |
          gcloud container clusters get-credentials "$CLUSTER_NAME" \
            --region="$REGION" --project="$PROJECT_ID" --quiet

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init (apps)
        working-directory: terraform/apps
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${STATE_BUCKET}" \
            -backend-config="prefix=terraform/state/apps"

      - name: Terraform Apply (apps)
        working-directory: terraform/apps
        run: |
          terraform apply \
            -var-file="terraform.tfvars" \
            -auto-approve

      - name: Output Cloud Run URL
        working-directory: terraform/apps
        run: |
          echo "→ Cloud Run URL: $(terraform output -raw cloud_run_url)"
