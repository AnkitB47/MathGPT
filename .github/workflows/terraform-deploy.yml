name: ðŸ›  Terraform Deploy

on:
  push:
    paths:
      - 'terraform/**'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  STATE_BUCKET: ${{ secrets.GCP_TF_STATE_BUCKET }}
  PROJECT_ID:   ${{ secrets.GCP_PROJECT_ID }}
  REGION:       ${{ secrets.GCP_REGION }}
  CLUSTER_NAME: ${{ secrets.GKE_CLUSTER_NAME }}

jobs:
  infra:
    name: ðŸš§ Infra (destroy & recreate GKE + node-pools)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install gcloud CLI
        run: |
          curl -fsSL https://sdk.cloud.google.com | bash >/dev/null
          source $HOME/google-cloud-sdk/path.bash.inc

      - name: Ensure no pre-existing cluster
        run: |
          set -e
          if gcloud container clusters describe "$CLUSTER_NAME" \
               --region="$REGION" --project="$PROJECT_ID" &>/dev/null; then
            echo "â†’ Cluster $CLUSTER_NAME exists; waiting for terminal statusâ€¦"
            while true; do
              status=$(gcloud container clusters describe "$CLUSTER_NAME" \
                         --region="$REGION" \
                         --format='value(status)')
              echo "   status = $status"
              if [[ "$status" == "RUNNING" || "$status" == "ERROR" ]]; then
                break
              fi
              sleep 10
            done
            echo "â†’ Deleting cluster $CLUSTER_NAMEâ€¦"
            gcloud container clusters delete "$CLUSTER_NAME" \
              --region="$REGION" --project="$PROJECT_ID" --quiet
          else
            echo "â†’ No existing cluster named $CLUSTER_NAME, skipping delete."
          fi

      - name: Clear stale Terraform lock
        run: |
          gsutil -q rm gs://$STATE_BUCKET/terraform/state/infra/default.tflock || true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init (infra)
        working-directory: terraform/infra
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${STATE_BUCKET}" \
            -backend-config="prefix=terraform/state/infra"

      - name: Terraform Apply (infra)
        working-directory: terraform/infra
        run: |
          terraform apply -var-file="terraform.tfvars" -auto-approve

  apps:
    name: ðŸš€ Apps (Cloud Run + Helm)
    needs: infra
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Install gcloud CLI
        run: |
          curl -fsSL https://sdk.cloud.google.com | bash >/dev/null
          source $HOME/google-cloud-sdk/path.bash.inc

      - name: Fetch GKE credentials
        run: |
          gcloud container clusters get-credentials "$CLUSTER_NAME" \
            --region="$REGION" --project="$PROJECT_ID" --quiet

      - name: Install Helm 3
        run: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Uninstall broken Helm releases
        run: |
          helm uninstall prometheus-operator-crds --namespace monitoring || true
          helm uninstall kube-prometheus-stack    --namespace monitoring || true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init (apps)
        working-directory: terraform/apps
        run: |
          # Clear any stale lock before init
          gsutil -q rm gs://$STATE_BUCKET/terraform/state/apps/default.tflock || true
          terraform init -reconfigure \
            -backend-config="bucket=${STATE_BUCKET}" \
            -backend-config="prefix=terraform/state/apps"

      - name: Terraform Apply (apps)
        working-directory: terraform/apps
        run: |
          terraform apply -var-file="terraform.tfvars" -auto-approve

      - name: Output Cloud Run URL
        working-directory: terraform/apps
        run: |
          echo "â†’ Cloud Run URL: $(terraform output -raw cloud_run_url)"
